
# Aum Ganeshay Namah !

# geeks for geeks course notes and practice
'''
x, y = input("enter two values: ").split()
print(f"{int(x)+int(y)}")   # addition of the entered numbers
print("first number is {} and second number is {}".format(x, y))

'''
'''
import time
count_seconds = 3
for i in reversed(range(count_seconds + 1)):
    if i > 0:
        print(i , end=' >>>', flush= True)
        time.sleep(1)
    else:
        print('start of time')

'''
'''
# help me print the list of all keywords in python
def get_all_keywords():
    import keyword
    return sorted(keyword.kwlist)

print("\nList of All Keywords in Python: \n",get_all_keywords())

'''

'''

#check if pairs -
def find_pairs(a,b):
            pairs = []
            for i in a:
                for j in b:
                        if i == j:
                            pairs.append(i)
            return pairs
a = [1,2,3,4,5]
b = [2,4,6,8,10]
print(find_pairs(a,b))
################################################

#check if palindrome
def is_palindrome(word):
    if word == word[::-1]:
        return True
    else:
        return False
print(is_palindrome('racecar'))

################################################

#check if prime
def is_prime(num):
    for i in range(2,num):
        if num % i == 0:
            return False
    return True     
print(is_prime(7))

################################################

#check if anagram
def is_anagram(word1,word2):
    if sorted(word1) == sorted(word2):
        return True
    else:
        return False
print(is_anagram('listen','silent'))

################################################

#check if pangram
def is_pangram(sentence):
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    for char in alphabet:
        if char not in sentence.lower():
            return False
    return True
print(is_pangram('The quick brown fox jumps over the lazy dog'))

################################################

#check if fibonacci
def is_fibonacci(num):
    a = 0
    b = 1
    while a < num:
        a,b = b,a+b
    if a == num:
        return True
    else:
        return False
print(is_fibonacci(8))

################################################

#check if perfect square
def is_perfect_square(num):
    if num < 0:
        return False
    else:
        return num**0.5 == int(num**0.5)
print(is_perfect_square(9))

################################################

#check if perfect cube
def is_perfect_cube(num):
    if num < 0:
        return False
    else:
        return num**(1/3) == int(num**(1/3))
print(is_perfect_cube(27))

################################################

#check if perfect number
def is_perfect_number(num):
    sum = 0
    for i in range(1,num):
        if num % i == 0:
            sum += i
    if sum == num:
        return True
    else:
        return False
print(is_perfect_number(6))

################################################

#check if happy number
def is_happy_number(num):
    sum = 0
    while sum != 1 and sum != 4:
        sum = 0
        for i in str(num):
            sum += int(i)**2
        num = sum
    if sum == 1:
        return True
    else:
        return False    
print(is_happy_number(7))

################################################
largest_number = -999999999999999
counter = 0

while True:
    number = int(input("Enter a number or type -1 to end program: "))
    if number == -1:
        break
    counter += 1
    if number > largest_number:
        largest_number = number

if counter != 0:
    print("The largest number is", largest_number)
else:
    print("You haven't entered any number.")

################################################

word = input('please enter a word : ')
while True:
    if word =='chupacabra':
         print('You have successfully left the loop.')
         break
    else:
            print('Try again.')
            word = input('please enter a word : ')


################################################

#check if leap year
def is_leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False
print(is_leap_year(2000))

################################################

user_word = input('please enter a word : ')
user_word = user_word.upper()

for alphabet in user_word:
    if alphabet in ['A','E','I','O','U']:
        continue
    else:
        print(alphabet)
        

################################################

#check if armstrong number
def is_armstrong_number(num):
    sum = 0
    for i in str(num):
        sum += int(i)**len(str(num))
    if sum == num:
        return True
    else:
        return False
print(is_armstrong_number(153))

################################################

#calculate height of the pyramid
blocks = int(input("enter the number of blocks : "))
height = 0
while blocks > 0:
    height = height + 1
    blocks -= height

print("The height of the pyramid:", height)

################################################

number = int(input('please enter a number: ')

while number != 0:
    if number % 2 == 0:
        number = number / 2
    else:
        number = number * 3 + 1
    print(number)
    steps += 1
print('steps = ', steps)

################################################

################################################    

# countdown timer
import  time
count_seconds = 3
for i in reversed(range(count_seconds +1)):
                if i > 0:
                                print(i , end ='>>>')
                                time.sleep(1)
                else:

                            print('Start')
                            

################################################

my_list = [3,5,7,5,10,8]
swapped = True

while swapped:
    swapped = False
    for i in range(len(my_list) - 1):
        if my_list[i] > my_list[i+1]:
            swapped = True
            my_list[i] , my_list[i+1] = my_list[i+1] , my_list[i]

print(my_list)


################################################################

#find the location of the element in the list
my_list =[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]
to_find = 5
found = False

for i in range(len(my_list)):
    found = my_list[i] == to_find
    if found:
           break
    

if found:
    print("element at index " + str(i))
else:
    print('absent')


################################################################
#check numbers in the lottery
my_numbers = [3,7,11,42,34,49]

lottery_numbers = [5,11,9,42,3,49]
total_hits = 0

for i in my_numbers:
    if i in lottery_numbers:
        print('yes I got it!' + str(i))
        total_hits+= 1

    else:
        continue
print(total_hits)

################################################################
#find unique elements in the list

my_list = [1,2,4,4,2,4,2,6,2]
print(list(set(my_list)))

################################################################
TRUE = 0
chess_board = [ [TRUE for i in range(8)] for j in range(8)]
print(chess_board)

###########################################3

# python institute test 3
vals = [0,1,2]
vals.insert(0 , 1)

del vals[1]
print(vals)

##############################################################

var = 1
while var < 10:
                print('#')
                var = var <<1

##############################################################

my_list = [1,2,3]
for v in range(len(my_list)):
                my_list.insert(1 , my_list[v])
print(my_list)

##############################################################

i = 0
while i <= 3:
                i += 2
                print('#')
                

##############################################################

my_list_1 =[1,2,3]
my_list_2 = []
for v in my_list_1:
                print(v)
                my_list_2.insert(0 , v)
print(my_list_2)

##############################################################
for i in range(1):
    print('#')
else:
    print('#')

##############################################################

#annoying chat to friend
import random
import pyautogui as pg 
import time

animal = ('monkey' , 'donkey')
time.sleep(5)
for i in range(5):
    a = random.choice(animal)
    pg.write('you are '+ a )
    pg.press('enter')

##############################################################
def intro(a="James Bond", b="Bond"):
                print("My name is", b + ".", a + ".")

intro()

##############################################################

value = None
if value is None:
    print("Sorry, you don't carry any value")

##############################################################
def list_sum(lst):
    if len(lst) == 1:
        return lst[0]
    else:
        return lst[0] + list_sum(lst[1:])
    
print(list_sum([5,4,3]))

##############################################################
# using a function reverse the list

def strange_list(n):
                strange_list = []
                
                for i in range(0 ,n):
                                strange_list.insert(  0 , i)
                return strange_list 

print(strange_list(5))

##############################################################
# day of the year
# is leap year

# Part 1

def is_year_leap(year):
    if year % 4 == 0:
                    if year % 100 == 0:
                                    if year % 400 == 0:
                                                    return True
                                    else:
                                                    return False
                    else:
                                    return False


test_data = [1900, 2000, 2016, 1987]
test_results = [False, True, True, False]

for i in range(len(test_data)):
    yr = test_data[i]
    print(yr,"->", end = " ")
    result = is_year_leap(yr)
    if result == test_results[i]:
        print("OK")
    else:
        print("Failed")   
        
# Part 2                            

def days_in_month(year , month):
                if month > 12 or month < 1:
                                return None
                if month == 2:
                                if is_year_leap(year):
                                                return 29
                                else:
                                                return 28
                if month in (4,6,9,11):
                                return 30
                else:
                                return 31

test_years = [1900, 2000, 2016, 1987]
test_months = [2, 2, 1, 11]
test_results = [28, 29, 31, 30]
for i in range(len(test_years)):
	yr = test_years[i]
	mo = test_months[i]
	print(yr, mo, "->", end="")
	result = days_in_month(yr, mo)
	if result == test_results[i]:
		print("OK")
	else:
		print("Failed")


# Part 3
def day_of_year(year, month, day):
    if month > 12 or month < 1:
                    return None
    if day > days_in_month(year, month) or day < 1:
        return None
    days = 0
    for i in range(1, month):
        days += days_in_month(year, i)
    return days + day

print(day_of_year(1999, 12, 31))

##############################################################

# check prime numbers between 1 to 20
def is_prime(num):
                for i in range(2, num):
                                if num % i == 0:
                                                return False
                else:
                                return True
                                


for i in range( 1, 20):
                if is_prime(i+1):
                                print(i+1 , end = ' ')
print()


##################################################################

def liters_100km_to_miles_gallon(liters):
                miles = liters / 3.785411784 * 100
                gallon = 1 / 0.264172052
                return miles * gallon

def miles_gallon_to_liters_100km(miles):
                liters = miles * 0.264172052 * 3.785411784
                return liters / 100
            
            
print(liters_100km_to_miles_gallon(3.9))
print(liters_100km_to_miles_gallon(7.5))
print(liters_100km_to_miles_gallon(10.))
print(miles_gallon_to_liters_100km(60.3))
print(miles_gallon_to_liters_100km(31.4))
print(miles_gallon_to_liters_100km(23.5))

###################################################################

def bmi(wt , ht):
                if ht < 1 or ht > 20 or \
                wt < 20 or wt > 200:
                    return none
                
                return wt / (ht ** 2)
print(bmi( 52.5 , 1.65))

###################################################################
def is_a_triangle(a,b,c):
                return a + b > c and b + c > a and a +c > b
print(is_a_triangle(1,2,2))

def is_a_right_triangle(a,b,c):
                return a**2 + b**2 == c**2 or b**2 + c**2 == a**2 or a**2 + c**2 == b**2


####################################################################

# crate a factorial function

def factorial_function(n):
                if n < 0:
                    return none
                if n < 2:
                    return 1
                
                result = 1
                for i in range (2 , n+1):
                    result *= i
                return result
            
            
            
for n in range(1 , 6):
    print(n , factorial_function(n))

###################################################################

# check if fibonacci
def fib(n):
    if n < 1:
        return None
    if n < 3:
        return 1
    return fib(n-1) + fib(n-2)

print(fib(10))

###################################################################
# factorial function # recursive function

def create_factorial(n):
                if n < 0 :
                                return None
                if n < 2:
                                return 1
                            
                return n * create_factorial(n-1)
                            
print(create_factorial(5))

#####################################################################

# fibonacci function # recursive function
def fib(n):
                if n < 1:
                                return None
                if n < 3:
                                return 1
                return fib(n-1) + fib(n-2)
print(fib(10))
#####################################################################
dictionary = {"cat": "chat", "dog": "chien", "horse": "cheval"}
phone_numbers = {'boss': 5551234567, 'Suzy': 22657854310}
empty_dictionary = {}

print(dictionary)
print(phone_numbers)
print(empty_dictionary)

##################################################################

# use of tuples and dictionary
school_class = { }

while True:
    name = input(' please enter the student name : ')
    if name == '':
                    break
                
    score = int(input('please enter student score: '))
    if score not in range(0 , 10):
                    break
                
    if name in school_class:
                    school_class[name] = school_class[name] + (score, )
    else:
                    school_class[name] = (score, )

for name in sorted(school_class.keys()):
    sum = 0
    counter = 0
    for score in school_class[name]:
        sum = sum+score
        counter += 1
    print(name, sum/counter) 

############################################################3
one_elem_tuple_1 = ("one" ,)    # Brackets and a comma.
one_elem_tuple_2 = "one" ,     # No brackets, just a comma.
print(type(one_elem_tuple_1))
print(one_elem_tuple_2)

###############################################################

# sum of squares of first n integers
def squaresum(n):
                sum = 0
                for i in range(0 , n+1):
                                sum += (i*i)
                return sum
print(squaresum(4))

######################################################################

# check if palindrome number 
def if_palindrome(n):
                return str(n) == str(n)[::-1]
print(if_palindrome(12321))

#################################################################


def fun(x):
    if  x % 2 == 0:
                    return 1
    else:
                    return
    

print(fun(fun(2) + 1))
'''
###############################################################
'''
# Basic tic tac toe Game
#pseudocode - 
# describe what the game should do and accordingly build unit by unit each component


1)first print the board and assign value to each position in board
2) assign player x or o
3) develop main game loop -players take turn
4) build check game result - win , tie or continue
# Set up the game board as a list
'''

#####################################################################
'''

board = [ "-", "-", "-",
         "-","-","-",
         "-", "-", "-"]


# Define a function to print the game board

def print_board():
    print(board[0] + " | " + board[1] + " | " + board[2])
    print(board[3] + " | " + board[4] + " | " + board[5])
    print(board[6] + " | " + board[7] + " | " + board[8])



#print_board()


def take_turn(player):
    print(player + "'s turn.")
    position = input("Choose a position from 1-9: ")
    valid = False
    while not valid:
        while position not in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
            position = input("Choose a position from 1-9: ")
        position = int(position) - 1
        if board[position] == "-":
            valid = True
        else:
            print("You can't go there. Go again.")
    board[position] = player
    print_board()


# Define a function to check if the game is over
def check_game_over():
    # Check for a win
    if (board[0] == board[1] == board[2] != "-") or \
    (board[3] == board[4] == board[5] != "-") or \
    (board[6] == board[7] == board[8] != "-") or \
    (board[0] == board[3] == board[6] != "-") or \
    (board[1] == board[4] == board[7] != "-") or \
    (board[2] == board[5] == board[8] != "-") or \
    (board[0] == board[4] == board[8] != "-") or \
    (board[2] == board[4] == board[6] != "-"):
        return "win"
    # Check for a tie
    elif "-" not in board:
        return "tie"
    # Game is still going
    else:
        return "continue"


# Define the main game loop

def play_game():
    print_board()
    current_player = "X"
    game_over = False
    while not game_over:
        take_turn(current_player)
        game_result = check_game_over()
        if game_result == "win":
            print(current_player + " wins!")
            game_over = True
        elif game_result == "tie":
            print("It's a tie!")
            game_over = True
        else:
            # Switch to the other player
            current_player = "O" if current_player == "X" else "X"

# Start the game
play_game()

'''
###################################################################
print("Hello World")